{
    "link": "https://bbs.nga.cn/read.php?tid=39241525",
    "title": "关于Java中的响应式编程",
    "post_time": "2024-02-07 18:52",
    "uid": "60029705",
    "content": "具体来说就webflux r2dbc的这一套技术栈。",
    "replies": [
        {
            "mid": "63782286",
            "mtime": "2024-02-07 19:23",
            "mcontent": "高并发的service肯定需要用异步，但也有CompletableFuture based的方案。"
        },
        {
            "mid": "1781995",
            "mtime": "2024-02-10 22:56",
            "mcontent": "虚拟线程本质上是降低了起线程的开销，和响应式编程没有直接关系。响应式的学习成本注定它不会大范围的使用，不过体验一下还是很有好处的。"
        },
        {
            "mid": "60029705",
            "mtime": "2024-02-11 00:22",
            "mcontent": "我想也是，目前的并发压力用CompletableFuture就足够应对了。"
        },
        {
            "mid": "19094692",
            "mtime": "2024-02-16 00:39",
            "mcontent": "没咋关注java的协程是用什么方案 反正c++的协程就是让你可以用同步的写法规避回调地狱 本质上无栈有栈协程都是让同一个逻辑线程忙里偷闲干别的事 io密集应用确实是一个很合适的应用场景"
        },
        {
            "mid": "64057759",
            "mtime": "2024-02-17 22:50",
            "mcontent": "几个月前我也对这个响应式编程很感兴趣，看的《Spring响应式编程》入门的，需要的话我发给你。它的主要应用在于把一些同步操作改为异步的，原有代码的同步操作io操作，请求接口之类的同步操作越多，使用响应式编程带来的性能提升也就越明显。但是坏处是debug的难度提升了好几个档次，更适合比较有经验的程序员写核心库的时候使用(个人看法)。开源项目，我记得那个spring gateway中用的就是(如果记错勿喷)， java连接redis的有个知名库也用了这个，以及halo2的博客系统就是用webflux写的，另外响应式编程你一定不能错过的是vert.x，性能可是吊打tomcat哦。至于未来是否会成为主流？我的看法是不会，project reactor(webflux使用的响应式编程框架)中的api太多了，官方文档都是一本砖头书，就这个上手难度就排除了很多人，而且带来的性能提升也是有限的，看来很多博客的比较webflux和传统servlet，大概能提升30%左右响应速度。以及虚拟线程是否会给响应式编程带来进一步的性能提升？目前好像还没有人做这个比较，不过project reactor在最新的版本已经支持了这一特性。"
        },
        {
            "mid": "39178226",
            "mtime": "2024-02-18 10:37",
            "mcontent": "哥们好，这个书能发我一份吗。响应式编程我本来也不想碰的，但gateway这边全是，改的头疼"
        },
        {
            "mid": "64057759",
            "mtime": "2024-02-18 22:22",
            "mcontent": "正想发给你链接，发现下载的pdf内容带个人手机号给你个购买pdf的地址，我在这买的[https:://www.ituring.com.cn/book/2574 此网页不属于本网站，不保证其安全性  继续访问       取消 https://www.ituring.com.cn/book/2574 https://www.ituring.com.cn/book/2574]"
        },
        {
            "mid": "34940373",
            "mtime": "2024-02-20 14:27",
            "mcontent": "响应式编程在前端这块比较普及，不知道后端用这个有什么好处没"
        },
        {
            "mid": "64593201",
            "mtime": "2024-02-20 19:11",
            "mcontent": "quarkus, mutiny那套写起来还行，比webflux舒服"
        },
        {
            "mid": "65305334",
            "mtime": "2024-02-29 09:29",
            "mcontent": "我用webflux r2dbc写了一个简单的项目，需要的话可以发你"
        },
        {
            "mid": "39364365",
            "mtime": "2024-02-29 18:21",
            "mcontent": "老哥发我一份可以吗，好奇了解一下"
        },
        {
            "mid": "64057759",
            "mtime": "2024-02-29 18:44",
            "mcontent": "因为购买后的pdf带手机号，只能给你个购买链接了[https:://www.ituring.com.cn/book/2574 此网页不属于本网站，不保证其安全性  继续访问       取消 https://www.ituring.com.cn/book/2574 https://www.ituring.com.cn/book/2574]"
        },
        {
            "mid": "42910592",
            "mtime": "2024-03-08 17:07",
            "mcontent": "spring官网上就有Project Reactor入门文档啊，就是来回Flux和Mono api，想入门看看官方文档足够了，想研究原理，那就研究下Netty"
        },
        {
            "mid": "61594953",
            "mtime": "2024-03-09 12:06",
            "mcontent": "没用过java，用过swift，响应式编程算是一种设计理念，用起来很爽，线上出问题debug很费劲，个人觉得业务上简单使用就可以，保证代码可读性，不要用的七绕八绕的。虚拟线程和响应式编程没关系，实质上就是用户态线程，可以提高CPU的使用率"
        },
        {
            "mid": "16946151",
            "mtime": "2024-03-09 17:06",
            "mcontent": "没diao卵用，徒增项目复杂度，我为这个结论负责。高并发的核心业务，主旨是简单，这种绝对不允许上线的。反倒是外围乱七八糟的服务，有人喜欢瞎搞，就随他去了。"
        },
        {
            "mid": "39410275",
            "mtime": "2024-03-19 09:44",
            "mcontent": "后端ws 相关业务  比如市场行情变动监控"
        },
        {
            "mid": "42625630",
            "mtime": "2024-03-19 17:21",
            "mcontent": "意义不大。一天1亿查询的峰值按二八估算也就4600qps，10台4c8g的传统java web开500线程就够了。响应式无非就1个线程省8M内存。只有中间件才需要这样的性能，因为一个中间件需要支持我的10个传统web，它没法开5000个线程"
        }
    ]
}