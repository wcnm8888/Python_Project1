{
    "link": "https://bbs.nga.cn/read.php?tid=40616493",
    "title": "[疑问]关于python多线程",
    "post_time": "2024-06-21 16:50",
    "uid": "62636723",
    "content": "看到一篇文章说python多线程只适用io密集型任务，计算密集形任务应该使用多进程。因为解释器只有一个线程。",
    "replies": [
        {
            "mid": "26377507",
            "mtime": "2024-06-21 17:17",
            "mcontent": "无论你的 Python 脚本是否被编译成二进制文件，只要它仍然依赖于 Python 解释器运行，GIL(全局解释器锁) 的限制就依然存在。因此，对于计算密集型任务，使用多进程而不是多线程是更优的选择。这种方式可以绕过 GIL 限制，实现真正的并行计算。"
        },
        {
            "mid": "65089954",
            "mtime": "2024-06-21 19:09",
            "mcontent": "事实上，如果你试过python的多进程你就会发现，进程之间的同步问题会让你意识到并行程序的复杂性"
        },
        {
            "mid": "3260753",
            "mtime": "2024-06-21 19:50",
            "mcontent": "Code py:1:import multiprocessing.Process as thread 或者Code c:1:2:3:4:5:\nm.def(\"new_thread\", []() {\n  std::jthread(...);\n});"
        },
        {
            "mid": "62636723",
            "mtime": "2024-06-21 22:09",
            "mcontent": "懂了，编译时将解释器包括GIL一同编译了，所以仍然受到GIL影响。谢解惑。"
        },
        {
            "mid": "151107",
            "mtime": "2024-06-25 15:59",
            "mcontent": "事实上， python的多线程在 io密集型任务中，效率比协程要差很多，比如 文件的读写。"
        },
        {
            "mid": "40617931",
            "mtime": "2024-07-11 12:03",
            "mcontent": "pyinstaller本质还是用python解释器执行你的代码，所以是的"
        }
    ]
}