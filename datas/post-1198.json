{
    "link": "https://bbs.nga.cn/read.php?tid=39573178",
    "title": "上来就问什么是面向对象，你是怎么理解面向对象的",
    "post_time": "2024-03-15 11:22",
    "uid": "38327520",
    "content": "我真心想扭头就走",
    "replies": [
        {
            "mid": "64774898",
            "mtime": "2024-03-15 11:42",
            "mcontent": "面试？"
        },
        {
            "mid": "64053536",
            "mtime": "2024-03-15 20:15",
            "mcontent": "一切皆对象"
        },
        {
            "mid": "60635682",
            "mtime": "2024-03-15 20:58",
            "mcontent": "找不到对象"
        },
        {
            "mid": "1213687",
            "mtime": "2024-03-15 23:34",
            "mcontent": "java？举个例子，各种包(功能)如果是你老婆你联系你老婆，可以当面喊(很多人都能听到)，可以电话(你旁边的人只能听到一部分)，可以微信打字(只有你知道)你老婆在家，穿护士是你老婆，穿jk也是你老婆你想让你老婆做饭给你吃，你可以说你饿了，你可以说你想吃点东西，你还可以直截了当跟她说帮你做个晚饭行不行"
        },
        {
            "mid": "62381820",
            "mtime": "2024-03-16 17:04",
            "mcontent": "有没有可能是看你简历不错。先给你放放水？"
        },
        {
            "mid": "62073702",
            "mtime": "2024-03-16 17:11",
            "mcontent": "不就是抽象吗，有啥好说的，说是面向对象，面向切面不是一个样，都是抽，抽来抽去的，用了这么多语言，感觉c,cpp,js,py,都差不多，至少体感上差不多，遇到问题就是抽。"
        },
        {
            "mid": "60173376",
            "mtime": "2024-03-16 18:15",
            "mcontent": "我理解都是为需求服务"
        },
        {
            "mid": "62799742",
            "mtime": "2024-03-17 00:39",
            "mcontent": "继承 封装  多态八股面试后的肌肉记忆"
        },
        {
            "mid": "43089971",
            "mtime": "2024-03-17 01:16",
            "mcontent": "面向对象是我最讨厌的特性，确切地说，继承那一坨又烂又臭的东西是我最讨厌的特性我心目中面向对象的最佳实践是cpp的面向接口编程和rust的trait，简洁有力，近乎完美，其他一切都是多余的累赘，为了引入而引入，极大增加心智负担，屎山的堆砌者，心情的破坏者封装多态是好的，继承大大的坏"
        },
        {
            "mid": "38776541",
            "mtime": "2024-03-17 09:54",
            "mcontent": "zsbd"
        },
        {
            "mid": "65630285",
            "mtime": "2024-03-18 13:31",
            "mcontent": "这玩意儿，面向对象编程，我自己理解就是把要解决的事情当中的一个个实体当做对象来分析，当个生物，他可以被继承，可以被封装，主要是这个思想把可能"
        },
        {
            "mid": "37858342",
            "mtime": "2024-03-18 16:29",
            "mcontent": "万物皆可对象, 变量,函数,接口,字符串都是对象"
        },
        {
            "mid": "60149986",
            "mtime": "2024-04-02 10:59",
            "mcontent": "这不是送分题吗"
        },
        {
            "mid": "63478635",
            "mtime": "2024-04-02 11:18",
            "mcontent": "对象就是把数据或者代码包装成一个个包，方便管理。"
        },
        {
            "mid": "595942",
            "mtime": "2024-04-02 11:54",
            "mcontent": "什么？继承是面向对象，接口不是面向对象的了？当有多种对象主要结构都差不多，B就比A多几个属性，B不继承A？非要再独写一个？"
        },
        {
            "mid": "43089971",
            "mtime": "2024-04-02 13:01",
            "mcontent": "所以我说的是我认为的\"面向对象\"的最佳实践复杂度不会消失只会转移,随地排放大小便的\"敏捷\"开发只是以降低可重构性可读性为代价提供了便捷性,最后积重难返,屎山大成面向接口的好处就是\"继承\"只有一层,不会有层层叠加重写重载的各种乱七八糟问题,复杂度得以降低,心智得以解放把代码复制一份横向展开也比层级展开要好,如果真的遇到了大量复用的场景,不妨先想想是不是抽象做的有问题所以我认为一门现代化的语言必须要有强大的宏和泛型支持,用到的时候才知道有多好用"
        },
        {
            "mid": "595942",
            "mtime": "2024-04-02 13:22",
            "mcontent": "代码难以维护很正常，接口多了也一样，还有更抽象的工厂接口等等！注释不写，胡写，乱命名变量，一样乱死！和面向对象没矛盾，只能说架构上面向了更宽泛了，但解决具体问题还是。重点你搞出来的东西业务上是否满足，性能上，可靠性怎么样，资源占用是不是尽可能的低，别一顿操作自以为写的高大上，跑下来慢死，会崩溃，就毫无意义了。编程语言是最无所谓的，2，3周基本都能掌握会的。强依赖一个语言的特性，把自己做窄了。"
        },
        {
            "mid": "43089971",
            "mtime": "2024-04-02 13:53",
            "mcontent": "各种编程范式我都会写,从手写汇编到高度抽象,有/无gc,动态类型/静态类型,声明式/命令式,函数式/过程式,泛型/宏这些东西各有所长各有所短,选择合适的工具这点很重要,但面向对象(确切的说是其中的继承)是我非常不喜欢的一种范式,可以说在有的选的情况下我绝对不会首选面向对象,哪怕不得不用我也尽量遵照我心目中的最佳实践来要求自己不写注释/乱命名是几乎所有语言/所有范式都会遇到的问题,但面向对象有自己独有的缺陷,不能因为共有的缺点而忽视独有的缺点程序的可靠性很大程度上依赖于程序固有的架构和程序员头脑是否清醒,硬要用汇编开发大型项目是绝对不理智的,这也是我所强调的---不要造屎山,以可维护性为主导另外,你所提到的两三周学会一门语言和可靠高性能低资源占用是冲突的,至少在现代的语言上来说是不可能的"
        },
        {
            "mid": "64848380",
            "mtime": "2024-04-03 12:35",
            "mcontent": "1、强相关的数据与算法应当通过对象绑定到一起2、很多情况下，相同的上下文会使用同一组函数，上下文不同时，使用的函数组也不同，那么这一组函数就是一个对象。通过对象来避免每次调用函数时，都需要通过当前上下文来if else当前要用哪个函数。虚表和虚指针实际上起到了switch case的作用。"
        }
    ]
}