{
    "link": "https://bbs.nga.cn/read.php?tid=40155186",
    "title": "算法题求助",
    "post_time": "2024-05-13 16:56",
    "uid": "62962813",
    "content": "遇到了一道题目，有没有老哥帮忙解决一下，谢谢大佬！！",
    "replies": [
        {
            "mid": "62048470",
            "mtime": "2024-05-13 19:56",
            "mcontent": "package mainimport (  \"fmt\")func maxGold(chests []int) int {  maxGold := 0  i := 0  for i < len(chests) {    if chests == 0 {      // 如果当前宝箱受诅咒，尝试找到相邻的未受诅咒的宝箱来配对消除      if i > 0 && chests[i-1] > 0 {        // 与前一个未受诅咒的宝箱配对        chests = append(chests[:i-1], chests[i+1:]...)        // 因为i已经移动到下一个位置，所以不需要增加i      } else if i < len(chests)-1 && chests[i+1] > 0 {        // 与后一个未受诅咒的宝箱配对        chests = append(chests[:i], chests[i+2:]...)        i-- // 因为删除了i+1位置的宝箱，所以i需要减1以保持位置正确      } else {        // 如果没有相邻的未受诅咒宝箱，则只能跳过当前受诅咒的宝箱        i++      }    } else {      // 如果当前宝箱未受诅咒，则累加金币并继续下一个宝箱      maxGold += chests      i++    }  }  return maxGold}func main() {  chests := []int{1, 0, 2, 0, 3, 0, 4, 5, 0, 6}  fmt.Println(\"Maximum gold the treasure hunter can get:\", maxGold(chests))}"
        },
        {
            "mid": "60028416",
            "mtime": "2024-05-13 20:14",
            "mcontent": "是那种一次性的吗感觉greedy或者dp可做，如果是那种消完自动拼的…dfs吧"
        },
        {
            "mid": "42707219",
            "mtime": "2024-05-15 14:08",
            "mcontent": "也是问的GPTCode c:1:2:3:4:5:6:7:8:9:10:11:12:13:14:15:16:17:18:19:20:21:22:23:24:25:26:27:\npublic class TreasureHunter {\n    public static int getMaxCoins(int[] coins) {\n        int n = coins.length;\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return coins[0];\n        }\n        \n        int[] dp = new int[n];\n        dp[0] = coins[0]; // 第一个宝箱的最大金币数量为它自身的金币数量\n        dp[1] = Math.max(coins[0], coins[1]); // 第二个宝箱的最大金币数量为前两个宝箱中金币数量较多的那个\n        \n        for (int i = 2; i < n; i++) { // 从第三个宝箱开始\n            if (coins[i] == 0) { // 如果当前宝箱受诅咒，无法选择\n                dp[i] = dp[i-1]; // 最大金币数量与前一个宝箱相同\n            } else {\n                dp[i] = Math.max(dp[i-1], dp[i-2] + coins[i]); // 最大金币数量为与前一个宝箱的最大金币数量相同或与前两个宝箱的最大金币数量加上当前宝箱的金币数量相比较，取较大值\n            }\n        }\n        \n        return dp[n-1]; // 返回寻宝者能够获得的最大金币数量\n    }\n}"
        },
        {
            "mid": "63311247",
            "mtime": "2024-05-16 20:17",
            "mcontent": "动态规划吧"
        },
        {
            "mid": "107960",
            "mtime": "2024-05-21 03:14",
            "mcontent": "一眼动态规划。"
        }
    ]
}