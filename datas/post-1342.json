{
    "link": "https://bbs.nga.cn/read.php?tid=39600352",
    "title": "大佬们，git合并代码时如何忽略某次提交呀",
    "post_time": "2024-03-18 16:09",
    "uid": "63128279",
    "content": "有个测试分支是打包时用的，平时大家在自己分支把功能写好后都合并到那个分支下。但是那个分支的配置文件啥的都是测试环境的，我们自己分支下是开发环境的。",
    "replies": [
        {
            "mid": "65583218",
            "mtime": "2024-03-18 17:11",
            "mcontent": "科学做法是配置文件和主分支配置文件分开，，不应该你会改到主分支的文件。。建议你花点时间该 一下你个人分支的开发环境用到的配置，和主分支的文件分开，或者用不同的env，不然后续可能会引起不必要的麻烦"
        },
        {
            "mid": "3363460",
            "mtime": "2024-03-19 10:43",
            "mcontent": "如果提交不多，可以挨个 cherry-pick 过来；如果提交很多，例如总共100个提交，唯独1个配置文件的提交不合并，那就 rebase -i 把那个提交放到顶部，合并的时候只合并到倒数第二个提交。换句话说，永远保持 “测试环境配置文件” 那个提交在你的分支顶部。或者创建一个新的分支，还是用 rebase -i ，但把 “测试环境配置文件” 那个提交从提交列表删除，就能得到一个“干净”的功能分支，把这个分支合并到公共分支。具体效果看图：我这里的 feat/sfc 最顶部那个提交其实是个测试用例，不需要提交，真正需要合并的是 bump/sfc (只是更新了一下组件版本，然后跑一遍测试)。那么我就可以先 checkout feat/sfc 分支，然后基于 dev 做一次 rebase -i，确保 “[wip] test: 组件测试用例” 这个提交在分支顶部。实际合并的时候，只合并到 bump/sfc 的位置。这样做有几个好处：一是功能分支永远领先 dev，可以放一些测试用的提交；二是合并的时候可以 fast-forward，不存在冲突。不过 rebase 会打乱提交的顺序，例如 dev 最新的提交是3月19日的，但待合并分支 (bump/sfc) 是3月17日提交的，rebase 之后3月17日这个提交反而在前面。"
        }
    ]
}