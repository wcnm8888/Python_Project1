{
    "link": "https://bbs.nga.cn/read.php?tid=40525347",
    "title": "偶数集群的分布式一致性算法怎么定义多数",
    "post_time": "2024-06-13 16:08",
    "uid": "63958521",
    "content": "常见的类似Paxos和Raft这样的算法在标准情况下都容许“少数”节点失效，依靠“多数”节点保持的数据确保安全性。奇数集群的多数很好理解没啥争议，但是偶数集群呢？假如我有一个4节点集群，默认情况下到底是允许2个节点失效还是允许1个节点失效？",
    "replies": [
        {
            "mid": "62331202",
            "mtime": "2024-06-13 16:17",
            "mcontent": "mark下 我想想知道"
        },
        {
            "mid": "20838952",
            "mtime": "2024-06-13 16:58",
            "mcontent": "1 个吧，感觉实际上算法没要求总数是奇数，只是多数的话要至少多 1 个，就是至少是 N + 1 > N 所以总数至少是 2N + 1，但 2N + 2 也没问题"
        },
        {
            "mid": "63958521",
            "mtime": "2024-06-15 07:45",
            "mcontent": "我觉得我想明白了。2n偶数节点集群必须要n+1在线，不然集群就可以分裂了。如果有4个节点，就只能容许1个失效。那么问题来了，同样只能容许1个失效，我为啥不用3个要用4个呢？我能想到的理由有两个。一个是commit的时候只要2个节点通过就可以返回，理论上可以快一点点？另一个就是节点配置变更的算法只允许一个一个添加或者移除，从一个奇数集群到下一个奇数的过程中必然要经过某个偶数集群所以算法层面必须要有安全保证。"
        },
        {
            "mid": "34907127",
            "mtime": "2024-06-17 14:26",
            "mcontent": "还有一个情况，失效不一定是同质的。两个节点正常，另外两个节点分别发生的不一样的错误，那集群的多数还是那两个正常的节点"
        },
        {
            "mid": "38619961",
            "mtime": "2024-06-17 15:23",
            "mcontent": "半数以上吧"
        }
    ]
}