{
    "link": "https://bbs.nga.cn/read.php?tid=39038014",
    "title": "[JAVA] [求助] 求助、求助、最近公司产品说需要支持docker模式，让研究下docker，查阅了点资料，但是遇到了疑问，想咨询下有经验的大佬。",
    "post_time": "2024-01-19 08:07",
    "uid": "63143366",
    "content": "目前的操作内容：",
    "replies": [
        {
            "mid": "38944786",
            "mtime": "2024-01-19 10:40",
            "mcontent": "你容器启动的时候  把服务器的端口映射给容器呗"
        },
        {
            "mid": "63143366",
            "mtime": "2024-01-19 11:41",
            "mcontent": "我就启动一个操作系统容器 应用手动装 你这种不行吧 我们产品目前没有对应的容器镜像"
        },
        {
            "mid": "38944786",
            "mtime": "2024-01-19 12:09",
            "mcontent": "你操作系统不也是容器吗？"
        },
        {
            "mid": "60519280",
            "mtime": "2024-01-19 12:51",
            "mcontent": "其实吧，不是特别牛逼的话，开发一个不支持docker的应用还挺难的"
        },
        {
            "mid": "63143366",
            "mtime": "2024-01-19 13:29",
            "mcontent": "其实产品就是说验证下  但是我感觉目前的这种方式不算我们产品支持docker  因为只是虚拟个ubuntu 系统  产品应用还是需要手动部署  这跟虚拟机操作感觉没啥区别  现在我的困扰就是 如何让办公网络  去访问这个部署好的应用(docker run 端口映射这种肯定不行的吧)   因为服务都是启动在容器的ip上面的  跟我们办公网络完全不通  操蛋。。。这是本人的知识盲区了   我看宿主机是能ping 通容器ip地址的  不知道服务启动了 ip:端口模式 能不能直接访问"
        },
        {
            "mid": "63143366",
            "mtime": "2024-01-19 13:32",
            "mcontent": "操作系统是容器呀  那如果我部署个应用在这个容器的一个虚拟网卡上  端口是 8443  那我怎么访问这个服务呢   难道启动这个系统容器的时候 就带上 -p  宿主机端口:8443 这种方式？"
        },
        {
            "mid": "63571721",
            "mtime": "2024-01-19 13:38",
            "mcontent": "支持docker,应该指的是 用docker部署你们的产品，   所以你们需要的是把你们的服务镜像化，这里需要一个docker镜像仓库，如果后端是java的化，google  maven插件jib, spring boot也有相关的插件，可以把一个java Web的应用程序打包成docker镜像，依次类推，前端，各种中间件，mysql ,redis，nginx等你们产品需要用到的镜像，都需要打包，这些基础镜像在docker hub上是有的，只要引用就行了，这里面有挂载的概念，mysql这种需要持久化的容器，你需要把目录挂载出来，不然每次重启，数据都会丢失，把所有服务都镜像化之后，需要编排，如果只是单机部署的化，可以使用docker-compose ,把所有应用编排，把端口映射出来，就可以访问了。如果需要在多台物理机上部署的话，这个我没经验。"
        },
        {
            "mid": "38944786",
            "mtime": "2024-01-19 13:43",
            "mcontent": "对啊"
        },
        {
            "mid": "38944786",
            "mtime": "2024-01-19 13:46",
            "mcontent": "而且你甚至服务的jar包都不用放容器里，从服务器挂载一个目录到容器里，jar包放容器外面都能用"
        },
        {
            "mid": "43187732",
            "mtime": "2024-01-19 14:45",
            "mcontent": "我觉得这个问题问运维会比较好"
        },
        {
            "mid": "63143366",
            "mtime": "2024-01-19 15:20",
            "mcontent": "公司就没人 搞过这个东西 全是网上找材料啦"
        },
        {
            "mid": "63143366",
            "mtime": "2024-01-19 16:51",
            "mcontent": "感觉用一个ubutun的容器 不行  好多依赖包 都没有  组件都无法正常安装有没有 那种镜像 含有 ubuntu + redis + ES + MYSQL 的镜像呀 ？"
        },
        {
            "mid": "63246493",
            "mtime": "2024-01-19 16:54",
            "mcontent": "问题1：容器多网卡配置在Docker中，确实可以通过创建多个网络并将容器连接到这些网络来为容器配置多个网卡。每个Docker网络实际上是一个隔离的网络空间，容器可以连接到一个或多个这样的网络。操作步骤如下：创建网络：使用docker network create命令创建多个网络。连接网络：启动容器时，或者在容器运行后，使用docker network connect命令将容器连接到这些网络。这样，容器就会在每个连接的网络中拥有一个网络接口。问题2：容器中Java应用的访问关于容器中的Java应用服务，你可以通过端口映射的方式使得外部(比如办公机器)可以通过IP和端口访问容器中的服务。操作步骤如下：端口映射：在运行容器时，使用-p标志来映射容器内部端口到宿主机的端口(例如docker run -p 宿主机端口:容器端口)。访问服务：在办公机器上，通过宿主机的IP地址和映射的端口号访问容器中的Java应用。关于你提到的网络路由问题，如果容器网络与宿主机网络不在同一网段，确实可能需要配置额外的路由规则。但一般情况下，通过Docker的端口映射功能，外部设备可以直接访问映射到宿主机的端口，而无需担心容器内部网络的具体配置。综上所述为容器配置多个网卡，需要创建多个Docker网络并将容器连接到这些网络。外部设备可以通过宿主机的IP和映射的端口访问容器内的服务，无需担心容器内部网络的详细配置。"
        },
        {
            "mid": "63143366",
            "mtime": "2024-01-19 17:05",
            "mcontent": "嗯 谢谢  但是现在基本的ubuntu 容器 根本没法装 组建  缺少太多依赖了 ？能不能 求个  Ubuntu 20.04 + redis (3.2.9) + ES(7.6.0)+ mysql (8.0.31)  的Dockerfile 文件 构建个镜像"
        },
        {
            "mid": "63246493",
            "mtime": "2024-01-19 17:18",
            "mcontent": "这样吧  你加我qq询问我  我不会经常翻看论坛   2904536024"
        },
        {
            "mid": "38944786",
            "mtime": "2024-01-19 18:24",
            "mcontent": "不是，你都用docker了 你其他中间件不能用docker启动吗？而且这些都有现成的镜像"
        },
        {
            "mid": "38859182",
            "mtime": "2024-01-19 18:44",
            "mcontent": "没必要拉个ubuntu这种操作系统的容器，你要是java项目就拉个JDK环境，是个node项目就拉nodejs 环境，是静态资源就拉个nginx"
        },
        {
            "mid": "63143366",
            "mtime": "2024-01-19 19:59",
            "mcontent": "你的意思是启动多个容器分开部署？ 但是这貌似不符合产品原来的部署风格 虽然这种方式是可行的 虽然没尝试  本意搞一个牛逼的最省事"
        },
        {
            "mid": "63143366",
            "mtime": "2024-01-19 20:01",
            "mcontent": "哈哈 反正是spring boot neety框架 jdk11 我不是研发"
        }
    ]
}