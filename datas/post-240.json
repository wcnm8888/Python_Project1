{
    "link": "https://bbs.nga.cn/read.php?tid=42730087",
    "title": "[求教]关于Unity游戏开发的C#自学路径",
    "post_time": "2024-12-13 17:30",
    "uid": "64321339",
    "content": "我是美术出生的一个开发者(已经工作十余年)，目前美术流程(2D+3D)都已经基本上全部走通",
    "replies": [
        {
            "mid": "62209078",
            "mtime": "2024-12-14 15:52",
            "mcontent": "可以尝试开始复刻一些经典小游戏，从启动界面到最终结算都有的那种开始弄。简单的gameplay扣扣完整度和细节。也可以找点书，类似于游戏编程精粹系列，游戏中的人工智能这种。里面会讲怎么从小的原型逐步丰富逻辑和算法去面对越来越复杂的情况。俺就是最开始从纸牌游戏入行的。"
        },
        {
            "mid": "3168320",
            "mtime": "2024-12-15 11:20",
            "mcontent": "游戏开发是个工业化比较高的，自己复刻一些简单游戏会比较花时间，而且也没有太大效果。先确定下方向，想做程序，美术还是TA？"
        },
        {
            "mid": "9657051",
            "mtime": "2024-12-15 13:49",
            "mcontent": "单纯的c#可以直接在巨硬官网学。"
        },
        {
            "mid": "64321339",
            "mtime": "2024-12-15 14:41",
            "mcontent": "谢谢~我有买了入门到精通的书，等到了仔细读读看"
        },
        {
            "mid": "62209078",
            "mtime": "2024-12-16 14:21",
            "mcontent": "还有一些作弊手法，上淘宝买一些成型的项目源代码，扒开开看看"
        },
        {
            "mid": "24392305",
            "mtime": "2024-12-18 09:52",
            "mcontent": "[https:://learn.microsoft.com/zh-cn/dotnet/csharp/fundamentals/program-structure/ 此网页不属于本网站，不保证其安全性  继续访问       取消 https://learn.microsoft.com/zh-cn/dotnet/csharp/fundamentals/program-structure/ https://learn.microsoft.com/zh-cn/dotnet/csharp/fundamentals/program-structure/]感觉这是我见过所有语言里最好的官方教学(Go的那个go-tour也很好)只能说大厂的糠是真的细"
        },
        {
            "mid": "62188647",
            "mtime": "2024-12-18 10:26",
            "mcontent": "不知道你的具体目标是什么，能独立完成独游体量游戏的开发？还是比较有体系的程序学习？        关于游戏开发(实质上是程序项目通用的)，我默认你对面向对象编程和类有概念，可以试着去了解一些框架和开发模式的知识，比如单例模式、组合模式、工厂模式等，能开拓你对程序开发“拆分代码”和游戏里具体实现的理解；看看MVC ECS模式的构成和具体用法，找一些网上的框架自己做简单项目实践练手，比如QFramework。我认为这些内容能极大地快速提升你对程序的理解，从制造面向过程答辩中脱离出来，进入能长期开发完整项目的水平。       关于开发习惯，开发严肃的正式项目时，如果有可能的话尽量避免在unity中赋值，用代码获取作替代，因为时间久了项目变大，你记不住要手动赋值的地方迁移和赋值设置麻烦，逃的课早晚要还，单纯测试内容和早期验证性demo除外。       关于代码学习，github看开源项目。我推荐新手去看杀戮尖塔的源码以理解中小型项目的代码构成，杀戮尖塔作为卡牌游戏，它的数据类简单易懂，并且可以参考它关于触发器的思想，了解解决时序问题的一些方案。它的源码你下个java反编译软件反编译游戏就可以拿到，没什么难度。"
        },
        {
            "mid": "64321339",
            "mtime": "2024-12-20 06:32",
            "mcontent": "对的对的，我就是说不出这个意思，就是想学习框架和开发模式。非常非常感谢大佬方向明确的建议！十分干货！"
        },
        {
            "mid": "64321339",
            "mtime": "2024-12-20 06:49",
            "mcontent": "谢谢大佬。因为我的知识点都是靠自己做Demo的时候遇到问题现搜的教学和文章学习积累的，所以一方面可能有点分散，另一方面很多词汇和用法是我按个人理解自己翻译的，整体不成体系，我再整体读一下整理整理。"
        },
        {
            "mid": "62188647",
            "mtime": "2024-12-20 10:30",
            "mcontent": "我觉得哈，写项目的核心矛盾在于你的大脑容量有限，当项目时间空间跨度变大以后记不住那么多东西/特殊情况(shi山就是这么来的)，导致项目进行不下去，所以需要一套方法论来保证无论什么情况你都能看懂项目代码，或者说让继续开发需要记住的内容不超过某个最大限度，这也是各种设计模式和框架的意图所在       广义上来说，你写项目的速度质量、能支撑的项目大小等一系列能力，在小项目的体现是shi山出现的速度，出现得越慢能力越强，当你连怎么用之前的代码都不知道的时候，shi山就炸了        总体而言，代码能力是阶梯上升的，你每接触并在实际运用中理解掌握一组新知识，能力就会得到显著提升(并觉得之前写的什么玩意儿)，所以多学多练，很快就会有独立开发项目的能力了"
        },
        {
            "mid": "60084222",
            "mtime": "2024-12-29 06:36",
            "mcontent": "一人包办还是很吃力的，尤其是独立游戏添加很多个人想法的时候，所以有资本的话还是组建小团队有分工比较好，精通了全流程自己当大脑就好，剩下的分工完成，不然我又会在b站看到“耗费10年自学美术程序音乐剧本，我做了一款游戏”"
        },
        {
            "mid": "64321339",
            "mtime": "2025-01-01 11:33",
            "mcontent": "感谢建议，撺团队我最大的阻碍是自己的道德线过不去。不能让兄弟们抛妻弃子陪着我豪赌。毕竟和四五年前不一样，拿PPT拉投资、钱到位再开工的时候已经过了。所以打算先做做看，成了的话也有底气把团队重新组回来，败了的话一人吃饱全家不饿。另外，就算是要组团队，不说自己是技术顶梁柱但至少要能看得懂代码、能增删改查。这样一方面团队沟通起来更便捷，二方面设计玩法的时候也能有较为实际的预算估计，再方面也不会因为人员变动影响项目排期。以上是我的个人观点~"
        },
        {
            "mid": "42557047",
            "mtime": "2025-01-03 09:46",
            "mcontent": "游戏行业连续好几年拉跨 未来预计裁员更严重  建议新手不要入这个行业"
        },
        {
            "mid": "1830154",
            "mtime": "2025-01-10 04:07",
            "mcontent": "没有编程背景, 从0学C#做Unity会很坑.因为Unity的核心是如何规避.net运行环境的GC, 也就是常说的0 allocation per frame, 而这个东西对于新手来说, 甚至比学会C++还要困难, 所以很多人都说Unity是骗人的坑, 骗你进来, 然后做完了游戏跑起来了最后了告诉你游戏做不好, 怎么弄都卡.所以不要在乎C#, 直接学Unity照着人家的案例和demo做就行了, 就当C#不存在.Unity里的C#代码, 和C#有本质区别, 别问为什么, 直接照搬就行了."
        },
        {
            "mid": "3260753",
            "mtime": "2025-01-10 09:14",
            "mcontent": "有点难崩您还是请回PC区吧 码农区人少容不下这尊菩萨"
        },
        {
            "mid": "66305960",
            "mtime": "2025-01-10 18:13",
            "mcontent": "大佬好强，我数字媒体技术专业大二，专业学到现在感觉都还没用上。目前参加过一次gamejam担任程序，感觉自己懂的真的太少了，写程序的时候磕磕绊绊的，很依赖ai"
        },
        {
            "mid": "64375529",
            "mtime": "2025-01-10 19:25",
            "mcontent": "14楼那个B别信，从我们电脑板块跑出来的坛宠，最喜欢的就是用一大堆专用名词误导小白。可以找个unity的教材系统学习一下，用unity这类通用游戏引擎做游戏，重点其实是还是怎么使用好这个引擎工具，而在引擎里使用C#其实只是使用它的一部分功能，这部分在学习unity的时候自然而然就能学会。unity用C#和虚幻用CPP，更像是拿它们当做驱动事物的脚本，运行的主体依然是引擎自己，而系统全面地学习C#则是奔着直接用纯C#手搓程序去了。不过如果是编程爱好者，或者有更高的追求，那么可以学，还是蛮锻炼逻辑思维的。如果追求再高那就要从C语言开始系统学习计算机科学知识了，感觉其实真用不到这个地步"
        },
        {
            "mid": "64388714",
            "mtime": "2025-01-11 17:08",
            "mcontent": "我给版主的建议要从我的现况说起：我是一个做了几年但是准备转行的Unity开发。我自己参加过几次gamejam，大学时也试过带队参加比赛，自己业余也做了十来个小作品。最近想转销售，起因是我不喜欢加班，但是不会干别的，机缘巧合下了解到这个东西那和我的答案有什么关系？因为你从美术做到程序，说明你的自学能力很强。但是作为技术人，我理解很多技术者都有的通病——一种对技术、美学纯粹的追求，乃至于对商业和商业逻辑的不理解或者抗拒，导致自己一门心思往很专业的技能去学，往往忽略了产品提供给对的人更重要这就引申出我要说的：技术不是最重要的，你能做出来，其实就足以应付产品研发到发布的需求。做出来的东西没有价值，那最终只会孤芳自赏。还有如果你要继续深入技术，那就尝试迭代产品，把体量做大。体量大了遇到的问题才能复杂，解决的深度才会深。这也是为什么大项目大公司学到东西更多的原因"
        },
        {
            "mid": "20801846",
            "mtime": "2025-01-13 14:35",
            "mcontent": "干了七八年unity，上线项目大大小小三四个，虽然没有成功的，也算干过，还是建议不要去自学编程吧，可以多了解一些美术在unity中的应用相关，成为一个技术美工，降低实际开发中和技术的沟通成本。毕竟一个游戏开发也不光有unity的前端，还得有后端业务，光学了unity也做不成游戏。最现实可行的方法还是找点志同道合的小伙伴一起兼职奋斗一下。全职还是算了吧，小团队全职搞太难了，现在的市场行情投资很难拉，而且运营也不好做。"
        }
    ]
}