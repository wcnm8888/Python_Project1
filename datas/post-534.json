{
    "link": "https://bbs.nga.cn/read.php?tid=41963762",
    "title": "最近在看《计算机程序的构造和解释》这本书，有点疑问",
    "post_time": "2024-10-07 17:21",
    "uid": "66001772",
    "content": "lisp语言版本的快看吐了，就是他的语法和我的语法完全不搭界",
    "replies": [
        {
            "mid": "62349350",
            "mtime": "2024-10-07 18:44",
            "mcontent": "除非你要当工具上生产用，不然了解思想即可"
        },
        {
            "mid": "62480715",
            "mtime": "2024-10-08 14:18",
            "mcontent": "为什么不看 js 版？"
        },
        {
            "mid": "66001772",
            "mtime": "2024-10-08 14:21",
            "mcontent": "买错书了"
        },
        {
            "mid": "39133312",
            "mtime": "2024-10-09 20:52",
            "mcontent": "这个写在纸上验算验算就可以了。scheme毕竟不是常用开发语言，甚至不是常用脚本语言。精华在 4 5  章。另外，有价值的只有scheme版本，python及之后可以视作错题练习。"
        },
        {
            "mid": "64388721",
            "mtime": "2024-10-09 23:40",
            "mcontent": "我粗略地看过原版，也细致地看过Python版本，我认为这本书在当代过于神话了，毕竟这本书成书于1985年。这本书的定位是“关于计算机程序设计的总体性观念的基础教科书”，属于入门书籍，在我看来，也就是讲述编程的常识的书籍。上面的回答认为这本书的精华是第4 5章，我倒是认为相反，这本书的核心是1,2,3章(对应Python语言的1,2,3除了解释器部分)，也就是编程的一些基本概念。编程的常识包括函数、对象、表达式、语句、递归、OOP、函数式等，基本思想是抽象和封装，现代实际用于工程的编程语言都是建立在这些常识上的。无论是原书还是Python版本，第4,5章的内容，在我看来并不属于入门内容，而且应该使用更丰富的学习资料来学习。这本书实质上是一本教科书，教科书需要老师消化吸收后，挑选合适的内容讲给学生。自己看书的问题在于读者通常抓不住重点，为看书而看书。划线部分能某种程度上证明我的观点还是有点道理。"
        },
        {
            "mid": "66001772",
            "mtime": "2024-10-10 01:15",
            "mcontent": "主要是我觉得这本书有点类似于武功中的心法一样"
        },
        {
            "mid": "61802466",
            "mtime": "2024-10-10 02:18",
            "mcontent": "可以配合CS61A来看，有人讲会好很多"
        },
        {
            "mid": "64388721",
            "mtime": "2024-10-10 12:34",
            "mcontent": "所以我说过于神化了，上世纪80年代的编程和本世纪20年代的编程还能是一回事？计算机科学领域的书籍本来就是看新不看旧，因为更新迭代太快了。这本书的定位就是入门书籍，教你“编程”是什么概念。从时效性来讲，它的所使用的编程语言、例子都已经过时，阅读效率较低。CS61A用Python来替换Scheme也是因为原来的材料内容太老了。换句话说，如果你已经接触过2,3门常用的编程语言，有实际的项目经验，那么编程的相关概念自己也已经归纳总结了，也即是本书说讲的“程序的构造”。至于“程序的解释”，去学一些编译原理比盯着一本书看实在多了。类似被神话的还有vim和ecmas，你如果上知乎去看，它们吹的天花乱坠，仿佛编程界的倚天屠龙。但现在还有多少人用这两个。vim确实是个好东西，但也没吹的那么神，也就ssh环境下轻量编辑文本有用。经历过应试教育的我们，看书很容易进入误区，深怕错过了什么内容。但类似的学习不是为了应付考试，你不需要把一门书中的内容倒背如流，或是做完所有习题，以此来证明自己看过了，学懂了。"
        },
        {
            "mid": "39133312",
            "mtime": "2024-10-10 14:14",
            "mcontent": "python版是纯粹的程序入门书籍，包括一些computer engineering，而scheme不是。scheme涉及到语言的结构而不只是程序的结构，关于语义导向的设计，表达式与子表达式形成的递归，和语句的区分，一些元语言结构(可以自然推广到支持元编程的命令式语言)，尾递归的问题(python的设计并没有搞清楚其中的一些概念)，如何在解释器中以最简单的方式自举，如何在函数式环境形成副作用。"
        },
        {
            "mid": "64388721",
            "mtime": "2024-10-10 14:33",
            "mcontent": "问题是这些内容并非入门阶段的内容，而且也有更好的学习材料，这也是Python版本为何只有前3章与原版差不多的原因。"
        },
        {
            "mid": "39133312",
            "mtime": "2024-10-10 14:48",
            "mcontent": "原书花时间是足够的。为什么不找其他函数式语言学习材料？当提及上面内容的时候，显然指向的是PLT的一些入门的问题，而不是一门具体语言如何使用。scheme足够简单，又足够讨论上述问题。一些Cpp元编程库文档中对于Lisp的描述："
        },
        {
            "mid": "64388721",
            "mtime": "2024-10-10 15:13",
            "mcontent": "看了下， JS版本的内容是原作者写的 ，我先读下后两章看看。"
        }
    ]
}